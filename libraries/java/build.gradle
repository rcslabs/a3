
allprojects {

	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'maven-publish'

	group = 'com.rcslabs'
	version = '3.1.0-SNAPSHOT'
	buildDir = 'target'

	repositories {
	    maven{ url 'http://repo.rcslabs.ru/archiva/repository/internal/'}
	    maven{ url 'http://repo.rcslabs.ru/archiva/repository/snapshots/'}
	    mavenLocal()
	    mavenCentral()
	}

	project.ext {
		if(!project.ext.has('env')){
			project.ext.env ='dev';
		}
		// println project.ext.env
		// TODO: set datetime once for all subprojects
		rcslabsRepo = 'http://repo.rcslabs.ru/archiva/repository/'+(version.endsWith('-SNAPSHOT') ? 'snapshots/' : 'internal/')
		datetime = new java.text.SimpleDateFormat("yyyyMMdd-HHmm").format(Calendar.getInstance().getTime());
		builder = System.getProperty("user.name");
		manifest = manifest {
		    new ByteArrayOutputStream().withStream { os ->
		        def result = exec {
		            executable = 'svn'
		            args = ['info']
		            standardOutput = os
		        }
		        def rev = (os.toString() =~ /Last Changed Rev: (\d+)/)
		        revision = rev[0][1];
		        println "SVN Revision: ${revision}"
		    }

	    	attributes(
	    		"Created-By": "Gradle " + gradle.gradleVersion,
	    		"Built-By":  builder,
	    		"Build-Jdk": System.getProperty('java.version'),
	    		"Implementation-Title": "Call library API", 
	    		"Implementation-Version": version,
	    		"Implementation-Vendor-Id": "RCSLabs",
	    		"Implementation-Build": revision,
	    		"Implementation-Build-Timestamp": datetime
	    	)
	    }
	}

	dependencies {
		compile 'javax.sip:jain-sip-api:1.2'
		compile 'javax.sip:jain-sip-ri:1.2.160'
		compile 'javax.sdp:nist-sdp:1.0'
		compile 'commons-lang:commons-lang:2.6'
		compile 'ch.qos.logback:logback-classic:1.0.0'
		compile 'commons-beanutils:commons-beanutils:1.8.3'
		compile 'aopalliance:aopalliance:1.0'
		compile 'com.rcslabs:nist-jaxb:1.0'
        testCompile "junit:junit:4.10"
    }

    jar {
		manifest = project.manifest {
        	from project.ext.manifest
    	}
	}

    task sourcesJar(type: Jar, dependsOn: classes) {
    	classifier = 'sources'
    	from sourceSets.main.allSource
		manifest = project.manifest {
        	from project.ext.manifest
    	}    	
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
	    classifier = 'javadoc'
	    from javadoc.destinationDir
		manifest = project.manifest {
        	from project.ext.manifest
    	}	    
	}

	artifacts {
	    archives sourcesJar
	    archives javadocJar
	}

	publishing {
		publications {
	        mavenJava(MavenPublication) {
	            from components.java
				//artifact sourcesJar
				artifact javadocJar
		        pom.withXml {
		        	def desc = 'Built by '+builder+' at '+datetime+' on rev. #'+revision
	                asNode().appendNode('description', desc)
	            }
	        }        
	    }

		repositories {
	        maven { url rcslabsRepo }
	    }
	}
}

project(':rcl-api-automation-ext') {
	dependencies {
		compile project(':rcl-api')
	}
}

project(':rcl-test') {
	dependencies {
		compile project(':rcl-api')
	}
}