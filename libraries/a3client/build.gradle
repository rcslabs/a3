
task copySources(type: Copy) {
//	outputs.upToDateWhen { false }
//	delete buildDir
//	mkdir buildDir
	from('src')
	into(buildDir)
	include('*.ts')
}

task copyLibs(type: Copy) {
    dependsOn ':libraries:rtmp2js:build'
    from('../rtmp2js/build')
    into(buildDir)
    include '*.swf'

    dependsOn ':libraries:media2js:build'
    from('../media2js/build')
    into(buildDir)
    include '*.swf'
}

task (build, type: Exec) {
	dependsOn 'copySources'
    dependsOn 'copyLibs'

	doFirst {
		workingDir buildDir
		def commandLineArgs = ['tsc', '-d', '--sourcemap', 'communicator.ts', '--target', 'ES5', '--outDir', buildDir, '--out', 'a3.js'];
		def os = System.getProperty("os.name").toLowerCase();
		if(os.contains('mac')){
			commandLineArgs[0] = "/usr/local/bin/tsc";
		}else if(os.contains('windows')){
			commandLineArgs[0] = System.getenv()['APPDATA'] + '\\npm\\node_modules\\typescript\\bin\\tsc'
			commandLineArgs.add(0, 'node');
		}
		commandLine commandLineArgs
	}
}

task (dist, type: Tar) {
    dependsOn 'build'
    extension = 'tar.gz'
    baseName = 'a3client-dist'
    compression = Compression.GZIP
    exclude '**/.svn'
    exclude '**/.git'

    doFirst {
        def info = 'BUILD INFO:\n';
            info+= "Version:     ${version}\n";
            info+= "Revision:    ${project.ext.revision}\n";
            info+= "Builder:     ${project.ext.builder}\n";
            info+= "Date:        ${project.ext.datetime}\n";
        file('build/build.info').write(info);
    }

    from(buildDir){
    	include 'build.info'
        include '*.swf'
        include 'a3.*'
        into('a3client')
    }
}